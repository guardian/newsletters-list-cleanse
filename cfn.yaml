AWSTemplateFormatVersion: 2010-09-09
Description: A monthly job to clean newsletter mailing lists of lapsed subscribers.

Parameters:
  Stack:
    Description: Stack name
    Type: String
    Default: identity
  App:
    Description: Application name
    Type: String
    Default: newsletter-list-cleanse
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - CODE
      - PROD
    Default: CODE
  DeployBucket:
    Description: Bucket where RiffRaff uploads artifacts on deploy
    Type: String
    Default: identity-lambda

Resources:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: "*"
        - PolicyName: sqs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action: sqs:*
              Resource:
                - !GetAtt NewsletterCutOffDateQueue.Arn
                - !GetAtt CleanseListQueue.Arn

  GetCutOffDatesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub newsletter-get-cut-off-dates-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: A monthly job to clean newsletter mailing lists of lapsed subscribers.
      Handler: com.gu.newsletterlistcleanse.GetCutOffDatesLambda::handler
      MemorySize: 1024
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java8
      Timeout: 60

  NewsletterCutOffDateQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: newsletter-newsletter-cut-off-date
      VisibilityTimeout: 100
      MessageRetentionPeriod: 3600 # 1 hour
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt NewsletterCutOffDateDlq.Arn
        maxReceiveCount: 5
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App

  NewsletterCutOffDateDlq:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: newsletter-newsletter-cut-off-date-dlq
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App

  NewsletterCutOffDateEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - NewsletterCutOffDateQueue
      - GetCutOffDatesLambda
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt NewsletterCutOffDateQueue.Arn
      FunctionName: !Sub newsletter-get-cleanse-list-${Stage}

  GetCleanseListLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub newsletter-get-cleanse-list-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: A monthly job to clean newsletter mailing lists of lapsed subscribers.
      Handler: com.gu.newsletterlistcleanse.GetCleanseListLambda::handler
      MemorySize: 1024
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java8
      Timeout: 60

  CleanseListQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: newsletter-cleanse-list
      VisibilityTimeout: 100
      MessageRetentionPeriod: 3600 # 1 hour
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt CleanseListDlq.Arn
        maxReceiveCount: 5
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App

  CleanseListDlq:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: newsletter-cleanse-list-dlq
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App

  CleanseListEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - CleanseListQueue
      - UpdateBrazeUsersLambda
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt NewsletterCutOffDateQueue.Arn
      FunctionName: !Sub newsletter-update-braze-users-${Stage}

  UpdateBrazeUsersLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub newsletter-update-braze-users-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: A monthly job to clean newsletter mailing lists of lapsed subscribers.
      Handler: com.gu.newsletterlistcleanse.UpdateBrazeUsersLambda::handler
      MemorySize: 1024
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java8
      Timeout: 60

  DailyEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: Event sent to process the previous day of data
      ScheduleExpression: cron(14 3 * * ? *)
      Targets:
        - Id: Lambda
          Arn: !GetAtt GetCutOffDatesLambda.Arn

  DailyEventLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetCutOffDatesLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DailyEvent.Arn
