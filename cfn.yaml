AWSTemplateFormatVersion: 2010-09-09
Description: A monthly job to clean newsletter mailing lists of lapsed subscribers.

Parameters:
  Stack:
    Description: Stack name
    Type: String
    Default: identity
  App:
    Description: Application name
    Type: String
    Default: newsletter-list-cleanse
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - CODE
      - PROD
    Default: CODE
  DeployBucket:
    Description: Bucket where RiffRaff uploads artifacts on deploy
    Type: String
    Default: identity-lambda
  BackupBucket:
    Description: Bucket where we temporarily store which users are removed from the mailing list
    Type: String

Mappings:
  Constants:
    CODE:
      MonthlyRun: DISABLED
    PROD:
      MonthlyRun: ENABLED

Resources:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: "*"
        - PolicyName: ssm
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - ssm:GetParametersByPath
              Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Stack}/${App}/${Stage}
        - PolicyName: s3
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub arn:aws:s3:::${BackupBucket}/*

  NewsletterCleanseLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub newsletter-cleanse-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: A monthly job to clean newsletter mailing lists of lapsed subscribers.
      Handler: com.gu.newsletterlistcleanse.Lambda::handler
      MemorySize: 1024
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java8
      Timeout: 900

  MonthlyEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: Event sent to run the list cleansing
      ScheduleExpression: cron(15 10 ? 1/1 TUE#2 *)
      State: !FindInMap [Constants, !Ref Stage, MonthlyRun]
      Targets:
        - Id: Lambda
          Arn: !GetAtt NewsletterCleanseLambda.Arn
          Input: '{"dryRun": false}'

  MonthlyEventLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt NewsletterCleanseLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MonthlyEvent.Arn

  MonthlyDryRunEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: Event sent to dry-run the list cleansing
      ScheduleExpression: cron(15 10 ? 1/1 TUE#1 *)
      State: !FindInMap [Constants, !Ref Stage, MonthlyRun]
      Targets:
        - Id: Lambda
          Arn: !GetAtt NewsletterCleanseLambda.Arn
          Input: '{"dryRun": true}'

  MonthlyDryRunEventLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt NewsletterCleanseLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MonthlyDryRunEvent.Arn
